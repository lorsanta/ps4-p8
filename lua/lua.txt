llex => Tokens
    luaX_next

lparser => Grammar
    funcargs
    => subexpr => getunopr

lcode => bytecode generator

Original program name string:
    LexState->z->data

token TK_NAME
    seminfo->ts => Token string
        ts = luaX_newstring(ls, luaZ_buffer(ls->buf), luaZ_bufferlen(ls->buff)) // @llex.c `int llex (LexState *ls`
ls->t.token = TK_NAME
ls->t.seminfo.ts

Parser the main function that parses each statement is:
static void statement (LexState *ls) 
(called from statlist)

Statement:
print("something")

statement -> exprstat
    -> suffixedexp 
        -> primaryexp -> singlevar
            varname = str_checkname(ls) -> ls->t.seminfo.ts // For some reason it's different from the original string!!
            -> singlvaraux: Finds for variable with varname in the current scope. Global => VVOID (not found)
            FuncState *fs = ls->fs;
            expdesc var, key;
            singlevaraux(fs, ls->envn, &var, 1) // Gets the global environment, puts into var
            codestring(&key, varname);
            luaK_indexed(fs, &var, &key);
        -> funcargs
            expdesc args
            -> explist(ls, &args) => (ls, v)
                -> expr(ls, v) -> subexpr(ls, v, 0)
            -> init_exp(f)
        luaK_codeABC(fs, OP_CALL, base, nparams+1, 2)
    /* call statement uses no results */